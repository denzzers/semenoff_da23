# -*- coding: utf-8 -*-
"""#10_Project_Исследование рынка заведений общепита Москвы для принятия решения об открытии нового заведения.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/denzzers/semenoff_da23/blob/main/%2310_Project_%D0%98%D1%81%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%80%D1%8B%D0%BD%D0%BA%D0%B0%20%D0%B7%D0%B0%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%BE%D0%B1%D1%89%D0%B5%D0%BF%D0%B8%D1%82%D0%B0%20%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D1%8B%20%D0%B4%D0%BB%D1%8F%20%D0%BF%D1%80%D0%B8%D0%BD%D1%8F%D1%82%D0%B8%D1%8F%20%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%BE%D0%B1%20%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B8%20%D0%BD%D0%BE%D0%B2%D0%BE%D0%B3%D0%BE%20%D0%B7%D0%B0%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F.ipynb

# Исследование рынка заведений общественного питания Москвы

## Содержание
1. [Описание проекта](#Description)
2. [Общая информация по данным](#General_information)
3. [Предобработка данных](#Data_preprocassing) \
    3.1. [Проверка неявных дубликатов](#Validation_new_dublicates) \
    3.2. [Обработка пропусков](#Processing_of_omissions) \
    3.3. [Изменение типов данных](#Changing_data_types) \
    3.4. [Добавление колонок в датасет](#Adding_columns_to_dataset)
4. [Анализ данных](#Data_Analysis) \
    4.1. [Категории заведений](#Categories) \
    4.2. [Кол-во посадочных мест по категориям заведений](#Number_of_seats) \
    4.3. [Изучение соотношения сетевых и несетевых заведений](#Network_network) \
    4.4. [Топ популярных сетей в Москве](#Top_network) \
    4.5. [Изучение административных районов Москвы](#Districts) \
    4.6. [Распределение средних рейтингов по категориям](#Ratings) \
    4.7. [Фоновая картограмма со средним рейтингом заведений каждого района](#Horoplet) \
    4.8. [Все заведения датасета](#All_zavedeniya) \
    4.9. [Топ-15 улиц по кол-ву заведений](#Top-15_ulits) \
    4.10. [Медиана средних чеков заведений для каждого района](#Sredniy_chek)
5. [Детализация исследования: открытие кофейни](#Opening_of_the_coffee_shop) \
    5.1. [Кофейни датасета](#Dataset_coffee_shops) \
    5.2. [Круглосуточные кофейни](#Round-the-clock) \
    5.3. [Рейтинги кофеен](#Rating_of_coffee_shops) \
    5.4. [Стоимости чашки капучино](#Cup)

## Описание проекта
<a id='Description'></a>
Текст введения. [Вернуться к началу](#Содержание)

***
Инвесторы из фонда «Shut Up and Take My Money» решили открыть завдение общественного питания в Москве. На данном этапе еще нет понимания, что именно будет реализовываться - кафе, ресторан и т.п., непонятно место расположение, меню, а также цены.

Для начала необходимо подготовить исследование рынка Москвы, найти интересные особенности и презентовать полученные результаты, которые в будущем помогут в выборе подходящего инвесторам места.

Нам доступен датасет с заведениями общественного питания Москвы, составленный на основе данных сервисов Яндекс Карты и Яндекс Бизнес на лето 2022 года. Информация, размещённая в сервисе Яндекс Бизнес, могла быть добавлена пользователями или найдена в общедоступных источниках. Она носит исключительно справочный характер.
***
"""

# Commented out IPython magic to ensure Python compatibility.
# импортируем необходимые библиотеки
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

import folium
from folium import Map, Choropleth, Marker
from folium.plugins import MarkerCluster
from folium.plugins import FastMarkerCluster
from folium.features import CustomIcon

import plotly.express as px
from plotly import graph_objects as go
#import plotly.io as pio
#from IPython.display import Image

from google.colab import drive
drive.mount('/content/drive')

#import warnings
#warnings.filterwarnings("ignore")

"""## Общая информация по данным
<a id='General_information'></a>
Текст введения. [Вернуться к началу](#Содержание)

Изучим предоставленную нам информацию, проверим данные на дубликаты, пропуски, проверим корректность типов данных в предоставленных колонках датасета, при необходимости добавим столбцы для последующего анализа.
"""

# откроем полученные данные и запишем в переменную
try:
    catering = pd.read_csv('/datasets/moscow_places.csv')
except:
    catering = pd.read_csv('/content/drive/MyDrive/datasets_YaP/moscow_places.csv')

# выведим head и tail полученного датасета
catering

# выведем общую информацию по датасету
catering.info()

"""<b>Подитог:</b>

По полученному датасету мы видим следующую картину:
- в датасете представлено 8406 позиций по Москве;
- в нашем распоряжении следующие данные:
    - тип объекта `object`:
        - `name` - название заведения;
        - `category` - категория (кафе, ресторан, пиццерия и т.п.) заведения;
        - `address` - адрес заведения;
        - `district` - район заведения, в котором оно расположено;
        - `hours` - время работы (часы и дни и недели) заведения;
        - `price` - информацию о категории цен заведения;
        - `avg_bill` - информацию о среднем чеке заведения;
    - тип объекта `float64`:
        - `lat` - широта географической точки заведения;
        - `lng` - долгота географической точки заведения;
        - `rating` - рейтинг заведения по оценкам пользователей в Яндекс Картах;
        - `middle_avg_bill` - средний чек заведения;
        - `middle_coffee_cup` - средняя стоимости чашки капучино в заведении;
        - `seats` - количество посадочных мест в заведении;
    - тип объекта `int64`:
        - `chain` - признак, является ли заведением сетевым (1) или нет (0).
- наименование колонок имеют правильный питообразный вид;
- в последующей предобработке нам необходимо выполнить следующие действия:
    - значения в колонка `name` и `address` привести с нижнему регистру для более корректной проверки на дубликаты;
    - привести колонки `middle_avg_bill`, `middle_coffee_cup`, `seats` к типу `int64` для корректного анализа данных;
    - в колонка `hours`, `price`, `avg_bill`, `middle_avg_bill`, `middle_coffee_cup`, `seats` имеются пропуски, необходимо проверить от куда они появились и при необходимости (если это не повлияет на будущий анализ) удалить их из датасета;
    - создать столбец `street` с названиями улиц из столбца с `address`;
    - столбец `is_24/7` с обозначением, что заведение работает ежедневно и круглосуточно (24/7).

## Предобработка данных
<a id='Data_preprocassing'></a>
Текст введения. [Вернуться к началу](#Содержание)

Для корректной работы с данными по заведениям необходимо все наименования и адрес данных заведений привести к нижнему регистру и проверить в последующем на неявные дубликаты.
"""

# приведем значение колонки 'name' к нижнему регистру
catering['name'] = catering['name'].str.lower()

# приведем значение колонки 'address'  к нижнему регистру
catering['address'] = catering['address'].str.lower()

"""### Проверка неявных дубликатов
<a id='Validation_new_dublicates'></a>
Текст введения. [Вернуться к началу](#Содержание)
"""

# проверим количество неявных дубликатов по колонкам 'name' и 'address'
print('Кол-во неявных дубликатов по названию и адресу: ', catering.duplicated(subset = ['name', 'address']).sum())

"""Количество неявных дубликатов мало, поэтому их можно смело удалить из датасета."""

# удалим неявные дубликаты из датасета по колонкам 'name' и 'address'
catering = catering.drop_duplicates(subset = ['name', 'address'])

# выполним повторную проверку по неяным дубликатам
print('Кол-во неявных дубликатов по названию и адресу: ', catering.duplicated(subset = ['name', 'address']).sum())

"""Неявные дубликаты по колонкам `name` и `address` удалены, выполняем предобработку далее."""

# проверим на дубликаты название районов, в которых расположены заведения
catering['district'].unique()

"""Все округа Москвы представлены корректно и дубликаты отсутствуют."""

# проверим на дубликаты категори заведений
catering['category'].unique()

"""По категориям также не найдены дубликаты, можно переходить к обработке пропусков.

### Обработка пропусков
<a id='Processing_of_omissions'></a>
Текст введения. [Вернуться к началу](#Содержание)

Как ранее было замечено в датасете присутствуют пропуски в следующих колнках:
- `hours`;
- `price`;
- `avg_bill`;
- `middle_avg_bill`;
- `middle_coffee_cup`;
- `seats`.

Необходимо обследовать данные колонки и решить, что можно сделать с пропущенными данными.
"""

# выведем количество пропусков по всем колонкам датасета
catering.isna().sum()

"""Наибольшее количество пропусков наблюдается в колонках `middle_avg_bill` и `middle_coffe_cup`, данные колонки зависят от колонки `avg_bill`, в которой также имеется большее количество пропусков.

- `avg_bill` - предлагаю заполнить пропуски значением 'нет данных';
- `middle_avg_bill` заполняется из колонки `avg_bill`, которая начинается со слов "Средний счёт" - проверим равенство колонок по заполненным значениям,  если количество равно, то пропуски заполняем значением 0.;
- `middle_coffee_cup` заполняется из колонки `avg_bill`, которая начинается со слов "Цена чашки капучино" - проверим равенство колонок по заполненным значениям, если количество равно, то пропуски заполняем значением 0.
"""

print('Количество пропусков осталось:', catering['middle_avg_bill'].isna().sum())

import warnings
warnings.filterwarnings("ignore")

# заполним пропуски в колонке 'avg_bill'
catering['avg_bill'] = catering['avg_bill'].fillna('нет данных')

# проверим количество строк по колонке 'avg_bill' со значением "Средний счёт" и кол-во заполненных строк по колонке 'middle_avg_bill'
print('Кол-во строк со значением "Средний счёт": ', len(catering.loc[catering['avg_bill'].apply(lambda x: x.find('Средний счёт')) != -1]))
print('Кол-во строк с заполненным средним счётом: ', len(catering.query('~middle_avg_bill.isna()')))

"""Количество в обоих случаях равно, поэтому пропуски заполняем значением 0."""

# проверим количество строк по колонке 'avg_bill' со значением "Цена чашки капучино" и кол-во заполненных строк по колонке 'middle_coffee_cup'
print('Кол-во строк со значением "Цена одной чашки капучино": ', len(catering.loc[catering['avg_bill'].apply(lambda x: x.find('Цена чашки капучино')) != -1]))
print('Кол-во строк с заполненным средним счётом: ', len(catering.query('~middle_coffee_cup.isna()')))

"""Количество в обоих случаях равно, поэтому пропуски заполняем значением 0.

Перейдем к колонкам `hours` и `price`. В данных колонках также присутсвуют пропуски, это может быть обсуловлено тем, что отсутствуют данные для определения рейтинга заведения, заведение нигде не указывало часы своей работы и т.п. Предлагается пропуски заполнить значением 'нет данных'.
"""

# заполним пустые значения в колонке 'hours'  значением 'нет данных'
catering['hours'] = catering['hours'].fillna('нет данных')

# заполним пустые значения в колонке 'price' значением 'нет данных'
catering['price'] = catering['price'].fillna('нет данных')

"""Перейдем к колонке `seats`, в которой также имеются пропуски. Опять же данные о подсчетах могли не вносится либо количество мест сложно подсчитать. Для корректного последующего анализа предлагаю все пустые значения заполнить значением -1."""

# заполним пустые значения в колонке 'seats' значением '-1'
catering['seats'] = catering['seats'].fillna(-1)

# проверим наличие пропусков после преобработки
catering.isna().sum()

catering = catering.reset_index()

"""Пропуски в датасете устранены, можно продолжать последующую предобработку.

### Изменение типов данных
<a id='Changing_data_types'></a>
Текст введения. [Вернуться к началу](#Содержание)

Также предлагаю перед выполнением анализа данных привести колонки со значением среднего чека, ценой за чашку кофе и количеством посадочных мест к целочисленному типу данных.
"""

# приведем колонку 'seats' к целому числу
catering['seats'] = catering['seats'].astype('int')

# выведим информацию по датасету для проверки изменений
catering.info()

"""### Добавление колонок в датасет
<a id='Adding_columns_to_dataset'></a>
Текст введения. [Вернуться к началу](#Содержание)
"""

# создадим колонку 'street' с названием улиц из колонки 'address'
catering['street'] = catering['address'].str.split(', ').str[1]

# создадим колонку 'is_24/7' с обозначением работы заведения по колонке 'hours'
# если колонка 'hours' имеет занчение "ежедневно, круглосуточно", то значение колонки 'is_24/7'  - True
# в противном случае False

catering['is_24/7'] = catering['hours'].str.contains('ежедневно, круглосуточно')

# выведим таблицу по результатам предобработки
catering

"""<b>Итог:</b>

Нами был проработан датасет с полученными данными:
- удалили неявные дубликаты по колонкам `name` и `address` в количестве 4 штук;
- поменяли типы данных в колонках `middle_avg_bill`, `middle_coffee_cup`, `seats`;
- заполнили пропуски в колонках `middle_avg_bill`, `middle_coffee_cup`, `seats`, `avg_bill`, `hours`, `price`;
- в колонках `name` и `address` значения были приведены к нижнему регистру;
- добавлены колонки `street` и `is_24/7`.

## Анализ данных
<a id='Data_Analysis'></a>
Текст введения. [Вернуться к началу](#Содержание)

### Категории заведений
<a id='Categories'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Какие категории заведений представлены в данных? Исследуйте количество объектов общественного питания по категориям: рестораны, кофейни, пиццерии, бары и так далее. Построим визуализацию и ответим на вопрос о распределении заведений по категориям
"""

#изучим какие категории нам представлены и какое кол-во в каждой категории
place_cetagories = catering.pivot_table(index = 'category', values = 'name', aggfunc = 'count')
place_cetagories = place_cetagories.rename(columns={'name': 'count'})
place_cetagories = place_cetagories.reset_index()
place_cetagories = place_cetagories.sort_values(by='count', ascending=False)
place_cetagories

#cчитаем общее количество заведений
total_count = place_cetagories['count'].sum()

#вычисляем процентное соотношение для каждой категории
percentages = [f'{count/total_count*100:.2f}%' for count in place_cetagories['count']]

fig_bar = go.Figure(data=[go.Bar(x=place_cetagories['category'],
                                y=place_cetagories['count'],
                                marker_color=px.colors.qualitative.Pastel,
                                text=percentages)])

fig_bar.update_layout(title='Количество заведений по категориям в Москве',
                      xaxis_title='Категории',
                      yaxis_title='Количество',
                      title_x=0.5)
fig_bar.show();

"""<div class="alert alert-block alert-danger">✍
    

__Комментарий от ревьюера №1__

При таком количестве категорий данный вид графика будет сложным к восприятию (круговая диаграмма информативна в принципе тогда, когда есть подписаны доли, подписаны значения, соответственно ставится вопрос зачем нужна круговая диаграмма, если нужно всё подписывать). Поправь, пожалуйста, этот момент во всем проекте. Что каждый раз на этом не акцентировать внимание
</div>

<div class="alert alert-info"> <b>Комментарии студента:</b> Исправил на столбчатую диаграмму, надеюсь правильный выбор сделал =) далее у меня круговых диаграмм более нет, кроме соотношения сетевых и несетевых заведений. Там мне кажется она подходит больше.
    
По остальным вроде все читабельно или не правильно считаю?

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №2__

Давай посмотрим)
    
    
Отличный и наглядный график 👍
    
Здорово, когда он подписан. Так быстрее понять о чем идёт речь на нём.
    
</div>

<b>Итог:</b>

По полученной сводной таблице и визуализации мы наблюдаем следующую картину:
- наибольшее количество заведений в Москве попадают в категорию кафе - `28,3 %`;
- рестораны занимают уверенное второе место - `24,3 %`;
- кофейни занимают уверенное третье место - `16,8 %`;
- примерно `25 %` от общего количества заведений принадлежат "бар, паб" - `9,09 %`, "пиццериям" - `7,53 %`, "быстрое питание" - `7,18 %`;
- самое меньшее количество заведений принадлежит категориям: "столовая" - `3,75 %` и "булочная" - `3,05 %`.

### Кол-во посадочных мест по категориям заведений
<a id='Number_of_seats'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Исследуем количество посадочных мест в местах по категориям: рестораны, кофейни, пиццерии, бары и так далее. Построим визуализации, проанализируем результаты и сформируем выводы.
"""

#создадим датасет для анализа посадочных мест, убрав заведения без указания кол-ва сидячих мест
seats_analysis = catering.query('seats != -1')

#сгруппируем датасет и посчитаем среднее кол-во посадочных мест по категориям
place_seats = seats_analysis.groupby('category') \
                                             .agg(median=('seats', 'median')) \
                                             .sort_values(by='median', ascending=False) \
                                             .reset_index()

#изменим тип данных колонки со средним значением на целочисленное
place_seats['median'] = place_seats['median'].astype('int')

#выведим полученную таблицу
place_seats

#построим визуализацию по полученной таблице
fig_bar = px.bar(place_seats,
             x='median',
             y='category',
             text='median')

fig_bar.update_layout(title='Среднее кол-во мест в заведениях',
                                   title_x = 0.5,
                                   xaxis_title='Количество посадочных мест',
                                   yaxis_title='Категория')

fig_bar.show();

"""<b>Итог:</b>

По полученной таблице и визуализации мы наблюдаем следующую картину:
- тройку лидеров по медианному числу посадочных мест удерживают:
    - `рестораны` - 86 мест;
    - `бары, пабы` - 82 места;
    - `кофейни` - 80 мест.
- далее идут заведения категории `столовая` - 75 мест;
- так как данные заведения обычно являются сетевыми и их много по территории, то они находятся в одном числовом диапазоне:
    - `быстрое питание` - 65 мест;
    - `кафе` - 60 мест;
    - `пиццерия` - 55 места.
- на последнем месте находятся заведения типа `булочная` - 50 мест, может быть связано с тем, что булочные в основном работают на вынос.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Да, больше всего посадочных мест у ресторанов, а меньше у булочных. Что вполне закономерно
</div>

### Изучение соотношения сетевых и несетевых заведений
<a id='Network_network'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b></b>

<b>ЗАДАЧА.</b> Рассмотрим и изобразим соотношение сетевых и несетевых заведений в датасете. Ответим на вопрос - каких заведений больше?
"""

#сгруппируем датасет по сетевым и несетевым заведениям
type_chain = catering['chain'].value_counts().reset_index()
type_chain.columns = ['chain', 'count']

#выведим полученный датасет
type_chain

#визуализируем отношение сетевые и несетевых заведений
fig_type_chain = go.Figure(data = [go.Pie(labels = ['Несетевые', 'Сетевые'],
                                            values = type_chain['count'],
                                            pull = [0.1, 0],
                                            hole=0.5)])

fig_type_chain.update_layout(title='Соотношение сетевых и несетевых заведений Москвы',
                                               title_x = 0.5,
                                               annotations=[dict(text='Тип', x=1.12, y=1.05, showarrow=False)])
fig_type_chain.show();

"""<b>Подитог:</b>

По полученной группировке мы видим, что `61,9 %` являются `Несетевые` заведения Москвы, а `38,1 %` являются `Сетевые` заведения.
Предлагаю просмотреть отношение категорий заведений сетевых и несетевых.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Не сетевых заведений, как и ожидалось больше
</div>
"""

#создадим сводную таблицу по категориям и типу заведений
place_chain = catering.pivot_table(index = ['category', 'chain'], values = 'name', aggfunc = 'count')
place_chain = place_chain.rename(columns={'name': 'count'})
place_chain = place_chain.reset_index()
place_chain = place_chain.sort_values(by=['count', 'chain'], ascending=False)
place_chain

fig_chain_cat = px.bar(place_chain,
                                     x='count',
                                     y='category',
                                     text= 'count',
                                     color='chain',
                                     category_orders={"chain":['Сетевое', 'Несетевое']},
                                     color_discrete_sequence=["#FFA15A", "#9467DB"],
                                     height=500,
                                     width=900)

fig_chain_cat.update_layout(title = 'Соотношение сетевых и несетевых заведений',
                                             title_x = 0.55,
                                             xaxis_title = 'Кол-во заведений',
                                             yaxis_title = 'Категории')

fig_chain_cat.show()

"""<b>Итог:</b>

По проведенному анализу можно сделать следующие выводы:
- `61,9 %` являются `Несетевые` заведения Москвы;
- `38,1 %` являются `Сетевые` заведения;
- по категориям преобладает соотношение, что несетевых заведений больше, кроме:
    - `Кофейнь` - Сетевые `720` и Несетевые `693`;
    - `Пиццерий` - Сетевые `330` и Несетевые `302`;
    - `Булочных` - Сетевые `157` и Несетевые `99`.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Верно, булочная и пиццерия в ТОП по кол-ву сетевых заведений
</div>

### Топ популярных сетей в Москве
<a id='Top_network'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Сгруппируем данные по названиям заведений и найдите топ-15 популярных сетей в Москве. Под популярностью понимается количество заведений этой сети в регионе. Построим подходящую для такой информации визуализацию. Ответим на вопросы:
- Знакомы ли нам эти сети?
- Есть ли какой-то признак, который их объединяет?
- К какой категории заведений они относятся?
"""

#сформируем датасет только с сетевыми заведениями
chain_data = catering.query('chain == 1')

top_15_chain = chain_data.groupby('name').agg({'rating' : 'median', 'category' : pd.Series.mode, 'district' : 'count'})
top_15_chain = top_15_chain.rename(columns={'district':'count'})
top_15_chain = top_15_chain.sort_values('count', ascending = False).reset_index().head(15)

top_15_chain

#сформируем срез таблицы для визуализации Топ-15
#top_15 = top_15_chain.loc[0:14].sort_values(by='count', ascending=True)
my_range=range(1,len(top_15_chain.index)+1)

#построим горизонтальный график
plt.hlines(y=my_range, xmin=0, xmax=top_15_chain['count'], color='skyblue')
plt.plot(top_15_chain['count'], my_range, "x")

#отформатриуем график
plt.yticks(my_range, top_15_chain['name'])
plt.title("Топ-15 сетевых заведений", loc='center')
plt.xlabel('Количество заведений')
plt.ylabel('Наименование заведений')

# выведим график
plt.show()

"""<b>Подитог:</b>

По полученной таблице и графику можно сделать следующие заключения:
- самым популярным сетевым заведением является `Шоколадница` - 120 заведений;
- второе и третье место за `Домино'c пицца` и `Додо пицца` - 76 и 74 заведений.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Здороово, что не забыл при группировке отфильтровать по chain
</div>
"""

fig = px.bar(top_15_chain,
                    x='count',
                    y='category',
                    color='category',
                    text = 'name')

fig.update_layout(title='Топ-15. Кол-во заведений по категориям',
                            title_x = 0.5,
                            xaxis_title='Кол-во заведений',
                            yaxis_title='Категория',
                            yaxis={'categoryorder':'total ascending'}
                 )
fig.show()

"""<b>Подитог:</b>

По полученной графику можно сделать следующие заключения, что наиболее распространенная категория в Топ-15 - это `кофейни`, это может быть обусловлено тем, что сетевые маленькие кофейни открыть проще и быстрее.

Несмотря на то, что `Доминос` и `Додо пицца` находились на 2 и 3 строчке Топ-15 сетевых заведений, по количеству заведений данная категория, а именно `пиццерия` находится на третьем месте и от категории `кофейни` отстает почти в 2-е раз.

Замыкает категория `булочная`, а именно одно сетевое заведение в Топ-15 `Буханка`, которая является сеткой, октрывающейся в основном в новых ЖК Москва, данное утвержденеи можно проверить на всякий случай.

Давайте изучим как данные заведения распределны по административным районам.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Верно, большинство из популярных сетей это кофейни
</div>
"""

#сгруппируем датасет по категориям и районам Москвы
catering_district = chain_data.groupby(['district', 'category', 'name']).agg({'rating' : 'median', 'address' : 'count'})
catering_district = catering_district.sort_values('rating', ascending = False).reset_index()
catering_district = catering_district.rename(columns={'address':'count'})
catering_district = catering_district[catering_district['name'].isin(top_15_chain['name'])]

catering_district = catering_district.reset_index()

#выведим head и tail полученной таблицы
catering_district

"""Для оформления читабельного графика предлагаю выполнить переименования административных районов до аббревиатур."""

def name_district(df):
    for i in range(len(df)):
        if df['district'][i] == "Северный административный округ":
            df.at[i, 'district'] = "CАО"
        elif df['district'][i] == "Северо-Восточный административный округ":
            df.at[i, 'district'] = "CВАО"
        elif df['district'][i] == "Северо-Западный административный округ":
            df.at[i, 'district'] = "CЗАО"
        elif df['district'][i] == "Западный административный округ":
            df.at[i, 'district'] = "ЗАО"
        elif df['district'][i] == "Восточный административный округ":
            df.at[i, 'district'] = "ВАО"
        elif df['district'][i] == "Юго-Восточный административный округ":
            df.at[i, 'district'] = "ЮВАО"
        elif df['district'][i] == "Южный административный округ":
            df.at[i, 'district'] = "ЮАО"
        elif df['district'][i] == "Юго-Западный административный округ":
            df.at[i, 'district'] = "ЮЗАО"
        else:
            df.at[i, 'district'] = "ЦАО"
    return df

catering_district = name_district(catering_district)

#проверим замену
catering_district

fig_catering_district = px.bar(catering_district,
                                               x='count',
                                               y='district',
                                               color='category')

fig_catering_district.update_layout(title='Кол-во заведений по категориям в районах Москвы',
                                                       title_x = 0.5,
                                                       xaxis_title='Кол-во заведений',
                                                       yaxis_title='Административный район',
                                                       yaxis={'categoryorder':'total ascending'})

fig_catering_district.show()

"""<b>Итог:</b>

По проведенному анализу зафиксируем слудющие наблюдения:
- самая популярная категория из Топ 15 сетевых заведений - `кофейни`;
- среди кофейнь самой популярной сеткой является `Щоколадница` - данная кофейня находится давно на рынке общественного питания, далее идут кофейни, которые быстро и легко открыть (например, по франшизе);
- наибольшее количество сетевых заведений находится в `Центральном административном округ` (ЦАО), по всем остальным административным районом можно наблюдать +- равенство;
- самый непопулярный административный район - это `Северо-западный административный округ`, это может быть связано с тем, что данный округ не гесто заселен, в нем находится много промышленных территорий.

### Изучение административных районов Москвы
<a id='Districts'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Какие административные районы Москвы присутствуют в датасете? Отобразим общее количество заведений и количество заведений каждой категории по районам. Попробуем проиллюстрировать эту информацию одним графиком.

Как мы ранее выяснили в датасете представлено 8402 заведений, давайте посмотрим как они распределены по административным районам Москвы.
"""

#выведим какие административные районы представлены в датасете
print('Кол-во административных районов Москвы в датасет: ', catering['district'].nunique(), '\n')
print('Наименования административных районов:\n\n', catering['district'].unique())

#создадим датасет и посмотрим категории заведений по административным райнам
category_district= catering.groupby(['district', 'category']).agg({'rating' : 'median', 'name' : 'count'})
category_district = category_district.sort_values('rating', ascending = False).reset_index()
category_district = category_district.rename(columns={'name':'count'})

#выведим head и tail полученной таблицы
category_district

#переведем наименование административных районов к аббревиатурам
category_district = name_district(category_district)

#проверим преобразование
category_district.head()

fig_category_district = px.bar(category_district,
                                                x='count',
                                                y='district',
                                                color='category')

fig_category_district.update_layout(title='Кол-во заведений по категорияв на каждый район Москвы',
                                                         title_x = 0.5,
                                                         xaxis_title='Кол-во заведений',
                                                         yaxis_title='Административный район',
                                                         yaxis={'categoryorder':'total ascending'})

fig_category_district.show()

"""<b>Итог:</b>

По полученному анализу зафиксируем следующие наблюдения:
- в представленном датасете перечислены все 9 административных районов Москвы:
    - Северный административный округ (САО);
    - Северо-Восточный административный округ (СВАО);
    - Северо-Западный административный округ (СЗАО);
    - Западный административный округ (ЗАО);
    - Центральный административный округ (ЦАО);
    - Восточный административный округ (ВАО);
    - Юго-Восточный административный округ (ЮВАО);
    - Южный административный округ (ЮАО);
    - Юго-Западный административный округ (ЮЗАО).
- мы наблюдаем, что с большим отрывом наибольшее кол-во заведений в ЦАО:
    - в центре большое кол-во туристов;
    - в центр едет большее часть людей отдыхать;
    - в центр большое кол-во развелекательных заведений (театры, парки, прогулочные улицы и т.д.);
- самые популярные категории `кафе`, `кофейни`, `рестораны`;
- на самом последнем месте по кол-ву заведений занимают `столовые`.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Согласен, результат ожидаемый ЦАО в лидерах
</div>

### Распределение средних рейтингов по категориям
<a id='Ratings'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Визуализируем распределение средних рейтингов по категориям заведений. Ответим на вопрос: сильно ли различаются усреднённые рейтинги в разных типах общепита?
"""

#создадим сводную таблицу по средним рейтингам категорий заведений
rating = catering.pivot_table(index = 'category', values = 'rating', aggfunc = 'mean')
rating = rating.round(2)
rating = rating.rename(columns={'rating': 'mean_rating'})
rating = rating.reset_index()
rating = rating.sort_values(by='mean_rating', ascending=False)

#выведим полученную таблицу
rating

"""<b>Подитог:</b>

Несмотря на то, что кафе, кофейни и рестораны у нас находятся почти везде на первых местах, на первом месте по среднему рейтингу находятся категории `бары, пабы`. Это можно связать с тем, что в данных заведений большой упор на развлечение, интересные блюда и напитки.

Визуализируем полученную таблицу на графике.
"""

fig_rating = px.bar(rating,
                              x='mean_rating',
                              y='category',
                              text='mean_rating',
                              color='category',
                              color_discrete_sequence=px.colors.sequential.Viridis)

fig_rating.update_layout(title='Распределение средних рейтингов по категориям заведений',
                                        title_x = 0.5,
                                        xaxis_title='Средний рейтинг',
                                        yaxis_title='Категории заведений')

fig_rating.update_xaxes(range=[4, 4.5])

fig_rating.show()

"""<b>Итог:</b>

По проведенном анализу фиксируем следующие наблюдения:
- категории представленные в датасете имеют ретйтинг выше значения `4`;
- как мы и видели по сводной таблице, самый выский средний рейтинг у заведений `бар,паб`;
- у категорий `ресторан`, `койфейня` и `пиццерия` имеют разницу в 0,1.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Верно,  брать медиану по фиксированным значениями от 1 до 5 - нецелесообразно.
</div>

### Фоновая картограмма со средним рейтингом заведений каждого района
<a id='Horoplet'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Построим фоновую картограмму (хороплет) со средним рейтингом заведений каждого района. Границы районов Москвы, которые встречаются в датасете, хранятся в файле `admin_level_geomap.geojson`.
"""

#подключим необходимые библиотеки для решения задачи
import json
from folium import Map, Choropleth

#сохраним датасет из файла 'admin_level_geomap.geojson' в переменную
try:
    with open('/datasets/admin_level_geomap.geojson', 'r') as file:
        admin_level_geomap = json.load(file)
except:
    with open('/content/drive/MyDrive/datasets_YaP/admin_level_geomap.geojson', 'r') as file:
        admin_level_geomap = json.load(file)

#построим таблицу со средним рейтингом каждого заведения
geo_rating = catering.pivot_table(index = 'district', values = 'rating', aggfunc = 'mean')
geo_rating = geo_rating.round(2)
geo_rating = geo_rating.rename(columns={'rating': 'mean_rating'})
geo_rating = geo_rating.reset_index()
geo_rating = geo_rating.sort_values(by='mean_rating', ascending=False)

#выедим полученную таблицу
geo_rating

# загружаем JSON-файл с границами округов Москвы
try:
    district_geo = '/content/drive/MyDrive/datasets_YaP/admin_level_geomap.geojson'
except:
    district_geo = '/datasets/admin_level_geomap.geojson'

# moscow_lat - широта центра Москвы, moscow_lng - долгота центра Москвы
moscow_lat, moscow_lng = 55.751244, 37.618423

# создаём карту Москвы
m = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с указанными интервалами для цветовой палитры
Choropleth(
    geo_data=district_geo,
    data=geo_rating,
    columns=['district', 'mean_rating'],
    key_on='feature.name',
    fill_color='RdYlGn',
    fill_opacity=0.5,
    line_opacity=0.2,
    legend_name='Средний рейтинг заведений по районам',
).add_to(m)

# выводим карту
m

"""<div class="alert alert-block alert-danger">✍
    

__Комментарий от ревьюера №1__

Перед отправкой проекта, его нужно прогнать на платформе ЯП
</div>

<div class="alert alert-info"> <b>Комментарии студента:</b> Вроде исправил и прогнал в ЯП, отрабатывает корректно, все карты видны.</div>

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №2__

Здорово, что разобрались)
    
</div>

<b>Итог:</b>

По полученной таблице и хороплету мы наблюдаем следующее:
- все рейтинги по районам выше 4х;
- наивысший рейтинг в Центральном административном округе - 4,38;
- наименьший рейтинг в Юго-Восточном административном округе -4,1.

### Все заведения датасета
<a id='All_zavedeniya'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Отобразим все заведения датасета на карте с помощью кластеров средствами библиотеки `folium`.
"""

# импортируем карту и маркер
from folium import Map, Marker
# импортируем кластер
from folium.plugins import MarkerCluster

# moscow_lat - широта центра Москвы, moscow_lng - долгота центра Москвы
moscow_lat, moscow_lng = 55.751244, 37.618423

# создаём карту Москвы
m = Map(location=[moscow_lat, moscow_lng], zoom_start=10)
# создаём пустой кластер, добавляем его на карту
marker_cluster = MarkerCluster().add_to(m)

# пишем функцию, которая принимает строку датафрейма,
# создаёт маркер в текущей точке и добавляет его в кластер marker_cluster
def create_clusters(row):
    Marker(
        [row['lat'], row['lng']],
        popup=f"{row['name']} {row['rating']}",
    ).add_to(marker_cluster)

# применяем функцию create_clusters() к каждой строке датафрейма
catering.apply(create_clusters, axis=1)

# выводим карту
m

"""<b>Итог:</b>

По полученной визуализации мы снова наблюдаем, что большая часть заведений сосредоточена в Центральном административном округе.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Отлично, хороплет освоен
</div>

### Топ-15 улиц по кол-ву заведений
<a id='Top-15_ulits'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b>Найдем топ-15 улиц по количеству заведений. Построим график распределения количества заведений и их категорий по этим улицам. Попробуем проиллюстрировать эту информацию одним графиком.

Также найдем улицы, на которых находится только один объект общепита. Сформилуриев выводы об этих заведениях.
"""

#сформируем таблицу с тое-15 улиц Москвы по кол-ву улицу
top_15_st = catering['street'].value_counts().reset_index().head(15)
top_15_st.columns = ['name_st', 'count']

#выведим полученную таблицу
top_15_st

#построим таблицу по улицам с категориями заведений
st_category = catering.pivot_table(index = ['street', 'category'],  values = 'name', aggfunc = 'count')
st_category = st_category.rename(columns={'name': 'count'})
st_category = st_category.reset_index()
st_category = st_category.sort_values(by='count', ascending=False)

#выведим полученную таблицу
st_category

#отсортируем таблицу st_category по сводной таблице топ-15 top_15_st
st_15_category = st_category[st_category['street'].isin(top_15_st['name_st'])]

#выведим таблицу
st_15_category

#построим визуализацию
fig = px.bar(st_15_category,
                   x='count',
                   y='street',
                   color='category',
                   color_discrete_sequence=px.colors.qualitative.Bold)

fig.update_layout(title='Кол-во заведений по категориям на Топ-15 улицах',
                             title_x=0.5,
                             xaxis_title='Кол-во заведений',
                             yaxis_title='Улицы',
                             yaxis={'categoryorder':'total ascending'})

fig.show()

"""<b>Подитог:</b>

По полученным таблицам и визуализации мы наблюдаем следующее:
- самое большое кол-во заведений на `Проспекте мира`;
- самое меньшее кол-во заведений на `улица Пятница`;
- на первом месте среди категорий находияся `кафе` на уже выделенной нами улице `Проспект мира`, а также вдоль `МКАД`;
- также самыми популярными являются категории `ресторан` и `кофейня`.

Теперь найдем улицы, на которых находится только один объект общепита.
"""

#построим таблицу с улицами где находится только одно заведение
one_catering = catering['street'].value_counts().reset_index()
one_catering.columns = ['street', 'count']
one_catering = one_catering.query('count == 1')

#выведим полученную таблицу
one_catering

#добавим к полученной таблице категории и узнаем какие категории в кол-ве одного заведения на полученных улицах
one_catering_category = st_category[st_category['street'].isin(one_catering['street'])] \
                                                                                            .groupby('category')['street'] \
                                                                                            .count() \
                                                                                            .reset_index(name='count') \
                                                                                            .sort_values(by='count', ascending=False)

#выведим таблицу
one_catering_category

"""<b>Итог:</b>

По проведенному анализу фиксируем следующие наблюдения:
- самое большое кол-во заведений на `Проспекте мира`;
- самое меньшее кол-во заведений на `улица Пятница`;
- на первом месте среди категорий находияся `кафе` на уже выделенной нами улице `Проспект мира`, а также вдоль `МКАД`;
- также самыми популярными являются категории `ресторан` и `кофейня`.
- всего `457 `, на которых находится всего одно заведение;
- по одному заведению на улицах в основном заведения категории `кафе`.

### Медиана средних чеков заведений для каждого района
<a id='Sredniy_chek'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Значения средних чеков заведений хранятся в столбце middle_avg_bill. Эти числа показывают примерную стоимость заказа в рублях, которая чаще всего выражена диапазоном. Посчитаем медиану этого столбца для каждого района. Используем это значение в качестве ценового индикатора района. Построим фоновую картограмму (хороплет) с полученными значениями для каждого района. Проанализируем цены в центральном административном округе и других. Ответим на вопрос как удалённость от центра влияет на цены в заведениях?
"""

#создадим сводную таблицу с медианными значениями средних чеков заведений
avg_bill_median = catering.pivot_table(index = ['district'],  values = 'middle_avg_bill', aggfunc = 'median')
avg_bill_median = avg_bill_median.rename(columns={'middle_avg_bill': 'bill_median'})
avg_bill_median = avg_bill_median.reset_index()
avg_bill_median = avg_bill_median.sort_values(by='bill_median', ascending=False)

#выведим таблицу
avg_bill_median

# создаём карту Москвы
m_2 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с помощью конструктора Choropleth и добавляем его на карту
Choropleth(
    geo_data=district_geo,
    data=avg_bill_median,
    columns=['district', 'bill_median'],
    key_on='feature.name',
    fill_color='RdYlGn',
    fill_opacity=0.5,
    line_opacity=0.2,
    legend_name='Средний чек заведений по районам',
).add_to(m_2)

# выводим карту
m_2

"""<div class="alert alert-block alert-danger">✍
    

__Комментарий от ревьюера №1__

Аналогично

<div class="alert alert-info"> <b>Комментарии студента:</b> Исправлено, как говорил ранее. Карты видны.</div>

<b>Итог:</b>

По полученной визуализации мы наблюдаем следующее:
- самый высокий средний чек наблюдается в `Центральном административном округе` и `Западном административном округе`;
- наименьший средний чек в `Юго-Восточном административном округе`;
- разница в средних чеках с `ЦАО` и `ЗАО` по сравнению с другими районами практически в 1,5-2 раза.

<b>ВЫВОД:</b>

По проведенному анализу мы фиксируем следующие общие выводы.

1. Мы провели подсчет процентов каждой категории заведений, которые нам представили в датасете. По полученному анализу мы получили следующие значения:
    - наибольшее количество заведений в Москве попадают в категорию кафе - `28,3 %`;
    - рестораны занимают уверенное второе место - `24,3 %`;
    - кофейни занимают уверенное третье место - `16,8 %`;
    - примерно `25 %` от общего количества заведений принадлежат "бар, паб" - `9,09 %`, "пиццериям" - `7,53 %`, "быстрое питание" - `7,18 %`;
    - самое меньшее количество заведений принадлежит категориям: "столовая" - `3,75 %` и "булочная" - `3,05 %`.


2. После чего мы посмотрели количество посадочных мест по каждой категории заведений в Москве и получили следующие значения:
    - тройку лидеров по медианному числу посадочных мест удерживают:
        - `рестораны` - 86 мест - это объясняется тем, что данные заведения предназначены для того, чтобы люди могли прийти и спокойно посидеть отдохнуть, если будет малое количество посадочных мест, то это может сказаться на рейтинге заведения, так как много недовольных посетителей будет;
        - `бары, пабы` - 82 места - данные заведения предназначены для развлечений и также необходимо большое количество мест;
        - `кофейни` - 80 мест.
    - далее идут заведения категории `столовая` - 75 мест;
    - так как данные заведения обычно являются сетевыми и их много по территории, то они находятся в одном числовом диапазоне:
        - `быстрое питание` - 65 мест;
        - `кафе` - 60 мест;
        - `пиццерия` - 55 места.
    - на последнем месте находятся заведения типа `булочная` - 50 мест, может быть связано с тем, что булочные в основном работают на вынос.


3. Определили соотношений сетевых к несетевым заведениям:
    - `61,9 %` являются `Несетевые` заведения Москвы;
    - `38,1 %` являются `Сетевые` заведения;
    - по категориям преобладает соотношение, что несетевых заведений больше, кроме:
        - `Кофейнь` - Сетевые `720` и Несетевые `693`;
        - `Пиццерий` - Сетевые `330` и Несетевые `302`;
        - `Булочных` - Сетевые `157` и Несетевые `99`.


4. После определили самые популярные сетевые заведения в Москве,
    - самым популярным сетевым заведением является `Шоколадница` - 120 заведений;
    - второе и третье место за `Домино'c пицца` и `Додо пицца` - 76 и 74 заведений;
    - по полученным графикам можно сделать следующие заключения, что наиболее распространенная категория в Топ-15 - это `кофейни`, это может быть обусловлено тем, что сетевые маленькие кофейни открыть проще и быстрее;
    - несмотря на то, что `Доминос` и `Додо пицца` находились на 2 и 3 строчке Топ-15 сетевых заведений, по количеству заведений данная категория, а именно `пиццерия` находится на третьем месте и от категории `кофейни` отстает почти в 2-е раз;
    - замыкает категория `булочная`, а именно одно сетевое заведение в Топ-15 `Буханка`, которая является сеткой, октрывающейся в основном в новых ЖК Москва, данное утвержденеи можно проверить на всякий случай.


5. Мы изучили датасет на предоставленные нам административные районы в Москве:
    - в представленном датасете перечислены все 9 административных районов Москвы:
        - Северный административный округ (САО);
        - Северо-Восточный административный округ (СВАО);
        - Северо-Западный административный округ (СЗАО);
        - Западный административный округ (ЗАО);
        - Центральный административный округ (ЦАО);
        - Восточный административный округ (ВАО);
        - Юго-Восточный административный округ (ЮВАО);
        - Южный административный округ (ЮАО);
        - Юго-Западный административный округ (ЮЗАО).
    - мы наблюдаем, что с большим отрывом наибольшее кол-во заведений в ЦАО:
        - в центре большое кол-во туристов;
        - в центр едет большее часть людей отдыхать;
        - в центр большое кол-во развелекательных заведений (театры, парки, прогулочные улицы и т.д.);
    - самые популярные категории `кафе`, `кофейни`, `рестораны`;
    - на самом последнем месте по кол-ву заведений занимают `столовые`.


6. Проведенный анализ по среднему рейтингу заведений определили, что:
    - категории представленные в датасете имеют ретйтинг выше значения `4`;
    - как мы и видели по сводной таблице, самый выский средний рейтинг у заведений `бар,паб`;
    - у категорий `ресторан`, `койфейня` и `пиццерия` имеют разницу в 0,1.


7. А также мы зафиксировали следующий результат по анализу рейтингов в районах Москвы с использованием хороплета:
    - все рейтинги по районам выше 4х;
    - наивысший рейтинг в Центральном административном округе - 4,38;
    - наименьший рейтинг в Юго-Восточном административном округе -4,1.


8. По полученной визуализации мы наблюдаем, что большая часть заведений сосредоточена в Центральном административном округе.


9. По анализу Топ-15 улиц по количеству заведений мы получили следующие данные:
    - самое большое кол-во заведений на `Проспекте мира`;
    - самое меньшее кол-во заведений на `улица Пятница`;
    - на первом месте среди категорий находияся `кафе` на уже выделенной нами улице `Проспект мира`, а также вдоль `МКАД`;
    - также самыми популярными являются категории `ресторан` и `кофейня`.
    - всего `457 `, на которых находится всего одно заведение;
    - по одному заведению на улицах в основном заведения категории `кафе`.


10. А по медианам средних чеков заведений для каждого района Москвы мы сделали следующие выводы:
    - самый высокий средний чек наблюдается в `Центральном административном округе` и `Западном административном округе`;
    - наименьший средний чек в `Юго-Восточном административном округе`;
    - разница в средних чеках с `ЦАО` и `ЗАО` по сравнению с другими районами практически в 1,5-2 раза.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Средний чек центрального округа самый высокий, что не удивительно. Не сильно по цене уступает и Западный округ. Бюджетные заведения легче встретить ЮАО, ЮВАО и СВАО.
</div>

## Детализация исследования: открытие кофейни
<a id='Opening_of_the_coffee_shop'></a>
Текст введения. [Вернуться к началу](#Содержание)

Основателям фонда «Shut Up and Take My Money» не даёт покоя успех сериала «Друзья». Их мечта — открыть такую же крутую и доступную, как «Central Perk», кофейню в Москве. Будем считать, что заказчики не боятся конкуренции в этой сфере, ведь кофеен в больших городах уже достаточно. Попробуем определить, осуществима ли мечта клиентов.

В данной детализации исследования мы ответим на следующие вопросы:
- Сколько всего кофеен в датасете? В каких районах их больше всего, каковы особенности их расположения?
- Есть ли круглосуточные кофейни?
- Какие у кофеен рейтинги? Как они распределяются по районам?
- На какую стоимость чашки капучино стоит ориентироваться при открытии и почему?

### Кофейни датасета
<a id='Dataset_coffee_shops'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Сколько всего кофеен в датасете? В каких районах их больше всего, каковы особенности их расположения?
"""

#посчитаем сколько кофеен у нас представлено в датасете
coffee_house = catering.query("category == 'кофейня'")
print('Количество кофеен в датасете: ', len(coffee_house))

"""<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Расчёт корректный
"""

# создаем карту Москвы
moscow_lat = coffee_house['lat'].mean()
moscow_lng = coffee_house['lng'].mean()

m_3 = folium.Map(location=[moscow_lat, moscow_lng], zoom_start=11)

# получаем данные о координатах каждой кофейни
location_data = coffee_house[['lat', 'lng']].values.tolist()

# получаем данные о попапах каждой кофейни
popup_data = coffee_house[['name', 'rating']].apply(lambda x: f'{x[0]} {x[1]}', axis=1).values.tolist()

# создаем кластер маркеров и добавляем его на карту
FastMarkerCluster(data=location_data, popups=popup_data).add_to(m_3)

# добавляем границы округов на карту
folium.GeoJson(data=district_geo,
    style_function=lambda x: {
        'fillColor': '#F0FFF0',
        'color': 'gray',
        'weight': 1.5,
        'fillOpacity': 0.3,
    }).add_to(m_3)

#выводим карту
m_3

"""<b>Подитог:</b>

По полученной визализации мы наблюдаем следующую картину:
- всего кофеен в Москве - 1413 заведний;
- наибольшее количество кофеен находится в `Центральном административном округе`;
- на втором месте по количеству кофеен `Юго-западный административный округ;`
- на третьем месте по количеству кофеен в `Северном административном окргуе` и `Северо-западном административном округе`.

### Круглосуточные кофейни
<a id='Round-the-clock'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Есть ли круглосуточные кофейни?
"""

#посчитаем сколько кофеен у нас представлено в датасете
coffee_house = coffee_house.rename(columns={'is_24/7': 'is_24_7'})
coffee_house_24_7 = coffee_house.query("is_24_7 == True")
print('Количество кофеен круглосуточно: ', len(coffee_house_24_7))

# создаем карту Москвы
moscow_lat = coffee_house['lat'].mean()
moscow_lng = coffee_house['lng'].mean()

m_4 = folium.Map(location=[moscow_lat, moscow_lng], zoom_start=11)

# получаем данные о координатах каждой кофейни
location_data = coffee_house_24_7[['lat', 'lng']].values.tolist()

# получаем данные о попапах каждой кофейни
popup_data = coffee_house_24_7[['name', 'rating']].apply(lambda x: f'{x[0]} {x[1]}', axis=1).values.tolist()

# создаем кластер маркеров и добавляем его на карту
FastMarkerCluster(data=location_data, popups=popup_data).add_to(m_4)

# добавляем границы округов на карту
folium.GeoJson(data=district_geo,
    style_function=lambda x: {
        'fillColor': '#F0FFF0',
        'color': 'gray',
        'weight': 1.5,
        'fillOpacity': 0.3,
    }).add_to(m_4)

#выводим карту
m_4

"""<b>Подитог:</b>

Из общего числа кофеен `59` работают круглосуточно и находятся по большей части в `Центральном административном округе`.

### Рейтинги кофеен
<a id='Rating_of_coffee_shops'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b> Какие у кофеен рейтинги? Как они распределяются по районам?
"""

#построим сводную таблицу по рейтингам кофеен в каждом районе
coffee_ratings = coffee_house.pivot_table(
    index='district',
    values='rating',
    aggfunc='mean'
).round(2).sort_values(
    'rating',
    ascending=False
).reset_index()

#выведим полученную таблицу
coffee_ratings

# создаём карту Москвы
m_5 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с помощью конструктора Choropleth и добавляем его на карту
Choropleth(
    geo_data=district_geo,
    data=coffee_ratings,
    columns=['district', 'rating'],
    key_on='feature.name',
    fill_color='RdYlGn',
    fill_opacity=0.5,
    line_opacity=0.2,
    legend_name='Средний рейтинг заведений по административным районам Москвы',
).add_to(m_5)

# выводим карту
m_5

"""<b>Подитог:</b>

По полученной сводной таблице и визуализации мы фиксируем следующие выводы:
- самый высокий средний рейтинг кофеен в `Центральном административном округе` и `Северо-Западном административном округе`;
- рейтинги кофеен в каждом районе не ниже 4;
- самый низкий средний рейтинг кофеен в `Западном административном округе`.

### Стоимости чашки капучино
<a id='Cup'></a>
Текст введения. [Вернуться к началу](#Содержание)

<b>ЗАДАЧА.</b>На какую стоимость чашки капучино стоит ориентироваться при открытии и почему?
"""

# вычисляем среднюю стоимость чашки кофе в каждом районе Москвы
cost_cup = coffee_house.pivot_table(
    values='middle_coffee_cup',
    index='district',
    aggfunc='mean'
).reset_index()
cost_cup['middle_coffee_cup'] = cost_cup['middle_coffee_cup'].round(2)

# сортируем результат по убыванию стоимости
cost_cup = cost_cup.sort_values('middle_coffee_cup', ascending=False)

# выводим на экран результат и среднюю стоимость в Москве
display(cost_cup)
print('Средняя стоимость чашки кофе в Москве:', round(cost_cup['middle_coffee_cup'].mean(), 2))

# создаём карту Москвы
m_6 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с помощью конструктора Choropleth и добавляем его на карту
Choropleth(
    geo_data=district_geo,
    data=cost_cup,
    columns=['district', 'middle_coffee_cup'],
    key_on='feature.name',
    fill_color='RdYlGn',
    fill_opacity=0.5,
    line_opacity=0.2,
    legend_name='Средняя цена чашки кофе по административным районам Москвы',
).add_to(m_6)

# выводим карту
m_6

"""<b>Подитог:</b>

По полученной сводной таблице и визуализации мы фиксируем следующее:
- самая дорогая чашка кофе в `Западном административном округе`, `Центральном административном округе` и `Юго-Западном административном округе`;
- средняя стоимость стоимость чашки кофе по всей Москве составляет `171.32`.

<b>Вывод:</b>

Открытие новой кофейни предлагаю осуществлять со следующими рекомендациями:
- самые благоприятные административные районы Москвы это:
    - `Центральный административный округ`;
    - `Западный административный округ`;
    - `Юго-Западный административный округ`,
    так как в данных районах высокая средняя стоимость чашки кофе, то есть можно обеспечить хорошую прибыль при открытии. А если выполнить искусственное снижение цены на чашку кофе при открытии заведения, то сможем обеспечить прирост посетителей;
- предлагается рассмотреть ежедневный круглосуточный режим работы, а лучше всего `Западный административный округ`, так как в данном районе недостаток таких заведений. Или рассмотреть для этого `Центральный административный округ`, так как это самые проходимые районы;
- в `Западном административном округе` наблюдается низкий рейтинг кофеен, что может сыграть на руку при открытии заведении в данном районе Москвы.

<div class="alert alert-block alert-success">✔️
    

__Комментарий от ревьюера №1__

Итоговый вывод завершает твое исследование. Представлены основные результаты полученные в ходе анализа, но самое главное - даны рекомендации заказчику. Это важное качество для аналитика. Развивай его и дальше
</div>

<b>Ссылка на презентацию проекта:</b> https://disk.yandex.ru/d/3C2GqQjw5AY1cQ

<div class="alert alert-block alert-warning">📝
Комментарий от ревьюера №1 </b>

---
У тебя получилась очень сильная и хорошая работа. Здорово, что расчеты ты сопровождаешь иллюстрациями, а так же не забываешь про комментарии, твой проект интересно проверять.

---

***Нужно поправить:***

1) Множественные ошибки в коде

2) Типы графиков

3) Поправить выводы и презентацию после корректировки


---


***Презентация сделана хорошо, особенно порадовало:***

* её структурность

* Один слайд-одна мысль. Идеально =) 😊

* последовательность

* общий вывод

* рекомендации

***Как её нужно улучшить:***



* Нумерация слайдов


Давай поправим мои основные комментарии и будем двигаться дальше.

---

У Яндекс Практикума есть отличный и бесплатный курс по презентациям. Советую, в свободное время освоить его (https://practicum.yandex.ru/profile/visual-presentation/)


---


Если у тебя будут какие-то вопросы по моим комментариям - обязательно пиши! Буду ждать работу на повторное ревью :)</div>

<div class="alert alert-info"> <b>Комментарии студента:</b> Спасибо тебе огромное, корректировки внес, которые ты просил. Также по корректировкам поправил презентацию, обновленные файлы лежат по ссылке.

<div style="border:solid blue 3px; padding: 20px">
<div class="alert alert-block alert-success">✔️
    

__Коментарий от ревьюера №2__

    
Денис, это тееб спасибо за обратную связь и правки)    
    
---    
    
В остальном всё чудно😊. Твой проект так и просится на github =)   
    
Поздравляю с успешным завершением проекта 😊👍
И желаю успехов в новых работах 😊

---

От себя хочу порекомендовать тебе отличный метериал про визуализации данных.
    
* **Книга Графики, которые убеждают всех | А. Богачев**
    
* **Курс по созданию презентаций для специалистов цифровых профессий (free): https://practicum.yandex.ru/visual-presentation/**
"""

