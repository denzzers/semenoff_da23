/*1. Посчитайте, сколько компаний закрылось.*/

SELECT COUNT(id)
FROM company
WHERE status = 'closed';

/*2. Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total .*/

SELECT funding_total
FROM company
WHERE category_code = 'news'
      AND country_code = 'USA'
ORDER BY funding_total DESC;

/*3. Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.*/

SELECT SUM(price_amount)
FROM acquisition
WHERE term_code = 'cash'
      AND acquired_at BETWEEN '2011-01-01' AND '2013-12-31';

/*4. Отобразите имя, фамилию и названия аккаунтов людей в твиттере, у которых названия аккаунтов начинаются на 'Silver'.*/

SELECT first_name,
       last_name,
       twitter_username
FROM people
WHERE twitter_username LIKE 'Silver%';

/*6. Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.*/

SELECT country_code,
       SUM(funding_total) AS sum_total
FROM company
GROUP BY country_code
ORDER BY sum_total DESC;

/*7. Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.*/

SELECT CAST(funded_at AS date),
       MIN(raised_amount) AS min_amount,
       MAX(raised_amount) AS max_amount
FROM funding_round
GROUP BY CAST(funded_at AS date)
HAVING MIN(raised_amount) <> 0 AND
       MIN(raised_amount) <> MAX(raised_amount);

/*8. Создайте поле с категориями:
- Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
- Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
- Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.*/

SELECT *,
       CASE
           WHEN invested_companies >= 100 THEN 'high_activity'
           WHEN invested_companies >= 20 AND invested_companies < 100 THEN 'middle_activity'
           WHEN invested_companies < 20 THEN 'low_activity'
       END
FROM fund;

/*9. Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.*/

SELECT ROUND(AVG(investment_rounds)) as avg_rounds,
       CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity
FROM fund
GROUP BY activity
ORDER BY avg_rounds;

/*10. Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы. 
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. 
Выгрузите десять самых активных стран-инвесторов: отсортируйте таблицу по среднему количеству компаний от большего к меньшему. Затем добавьте сортировку по коду страны в лексикографическом порядке.*/

SELECT country_code,
       MIN(invested_companies) AS min_comp,
       MAX(invested_companies) AS max_comp,
       AVG(invested_companies) AS avg_comp
FROM fund
WHERE CAST(founded_at AS date) BETWEEN '2010-01-01' AND '2012-12-31'
GROUP BY country_code
HAVING MIN(invested_companies) <> 0
ORDER BY avg_comp DESC, country_code
LIMIT 10;

/*11. Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.*/

SELECT p.first_name,
       p.last_name,
       e.instituition
FROM people AS p
LEFT OUTER JOIN education AS e ON p.id=e.person_id;

/*12. Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.*/

SELECT c.name,
       COUNT(DISTINCT e.instituition) AS count_inst
FROM education AS e
LEFT OUTER JOIN people AS p ON e.person_id=p.id
LEFT OUTER JOIN company AS c ON p.company_id=c.id
GROUP BY c.name
ORDER BY count_inst DESC
OFFSET 1
LIMIT 5;

/*13. Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.*/

SELECT DISTINCT c.name
FROM company AS c
LEFT OUTER JOIN funding_round AS fr ON c.id=fr.company_id
WHERE c.status = 'closed'
      AND fr.is_first_round = 1
      AND fr.is_last_round = 1;

/*14. Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.*/

SELECT p.id
FROM
    (SELECT DISTINCT company_id
    FROM company AS c
    LEFT OUTER JOIN funding_round AS fr ON c.id=fr.company_id
    WHERE c.status = 'closed'
          AND fr.is_first_round = 1
          AND fr.is_last_round = 1) AS dist_name
INNER JOIN people AS p ON dist_name.company_id=p.company_id;

/*15. Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.*/

SELECT DISTINCT p.id,
       e.instituition
FROM
    (SELECT DISTINCT company_id
    FROM company AS c
    LEFT OUTER JOIN funding_round AS fr ON c.id=fr.company_id
    WHERE c.status = 'closed'
          AND fr.is_first_round = 1
          AND fr.is_last_round = 1) AS dist_name
INNER JOIN people AS p ON dist_name.company_id=p.company_id
INNER JOIN education AS e ON p.id=e.person_id;

/*16. Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.*/

WITH

dist_name AS (SELECT DISTINCT company_id
              FROM company AS c
              LEFT OUTER JOIN funding_round AS fr ON c.id=fr.company_id
              WHERE c.status = 'closed'
                    AND fr.is_first_round = 1
                    AND fr.is_last_round = 1),

p_education AS (SELECT p.id,
                       e.instituition
                FROM dist_name
                INNER JOIN people AS p ON dist_name.company_id=p.company_id
                INNER JOIN education AS e ON p.id=e.person_id)

SELECT id,
       COUNT(instituition)
FROM p_education
GROUP BY id;

/*17. Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.*/

WITH

dist_name AS (SELECT DISTINCT company_id
              FROM company AS c
              LEFT OUTER JOIN funding_round AS fr ON c.id=fr.company_id
              WHERE c.status = 'closed'
                    AND fr.is_first_round = 1
                    AND fr.is_last_round = 1),

p_education AS (SELECT p.id,
                       e.instituition
                FROM dist_name
                INNER JOIN people AS p ON dist_name.company_id=p.company_id
                INNER JOIN education AS e ON p.id=e.person_id),

count_inst AS (SELECT id,
                      COUNT(instituition) AS count_instituition
               FROM p_education
               GROUP BY id)

SELECT AVG(count_instituition)
FROM count_inst;

/*18.
Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Facebook*.
*(сервис, запрещённый на территории РФ)*/

WITH  a AS (SELECT * 
            FROM company
            WHERE name='Facebook'),
      y AS (SELECT p.id,
                   COUNT(c.instituition)
            FROM a
            INNER JOIN people AS p ON a.id = p.company_id
            LEFT JOIN education c ON p.id = c.person_id
            WHERE c.instituition IS NOT NULL
            GROUP BY p.id)
     
SELECT AVG(COUNT)
FROM y;

/*19. Составьте таблицу из полей:
- name_of_fund — название фонда;
- name_of_company — название компании;
- amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.*/

WITH

c AS (SELECT *
      FROM company
      WHERE milestones > 6),

fr AS (SELECT *
       FROM funding_round
       WHERE EXTRACT(YEAR FROM CAST(funded_at AS timestamp)) IN ('2012', '2013'))

SELECT f.name AS name_of_fund,
       c.name AS name_of_company,
       fr.raised_amount AS amount
FROM investment AS i
INNER JOIN c ON i.company_id=c.id
INNER JOIN fund AS f ON i.fund_id=f.id
INNER JOIN fr ON i.funding_round_id=fr.id
GROUP BY f.name, c.name, fr.raised_amount;

/*20. Выгрузите таблицу, в которой будут такие поля:
- название компании-покупателя;
- сумма сделки;
- название компании, которую купили;
- сумма инвестиций, вложенных в купленную компанию;
- доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы. 
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.*/

SELECT c.name AS buyer_company,
       price_amount,
       p.name AS purchased_name,
       p.funding_total AS investment,
       ROUND(price_amount / p.funding_total) AS difference
FROM acquisition AS a
LEFT JOIN company AS c ON a.acquiring_company_id=c.id
LEFT JOIN company AS p ON a.acquired_company_id=p.id
WHERE price_amount <> 0
      AND p.funding_total > 0

ORDER BY price_amount DESC, purchased_name
LIMIT 10;

/*21. Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.*/

SELECT c.name,
       EXTRACT(MONTH FROM CAST(fr.funded_at AS date))
FROM company AS c
LEFT OUTER JOIN funding_round AS fr ON c.id=fr.company_id
WHERE CAST(fr.funded_at AS date) BETWEEN '2010-01-01' AND '2013-12-31'
      AND c.category_code = 'social'
      AND fr.raised_amount != 0;

/*22. Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
- номер месяца, в котором проходили раунды;
- количество уникальных названий фондов из США, которые инвестировали в этом месяце;
- количество компаний, купленных за этот месяц;
- общая сумма сделок по покупкам в этом месяце.*/

WITH

acq_c AS (SELECT EXTRACT(MONTH FROM CAST(acquired_at AS date)) AS month,
                 COUNT(acquired_company_id) AS count_comp,
                 SUM(price_amount) AS sum_amount
          FROM acquisition
          WHERE EXTRACT(year from acquired_at) BETWEEN 2010 AND 2013
          GROUP BY month),

fr_uniq AS (SELECT EXTRACT(MONTH FROM CAST(funded_at AS date)) AS month,
                   COUNT(DISTINCT f.name) AS name_fund
            FROM funding_round AS fr
            LEFT JOIN investment as i on i.funding_round_id = fr.id
            LEFT JOIN fund as f on f.id = i.fund_id
            WHERE EXTRACT(year from funded_at) BETWEEN 2010 AND 2013
                  AND f.country_code = 'USA'
            GROUP BY month)
            
SELECT fr_uniq.month,
       fr_uniq.name_fund,
       acq_c.count_comp,
       acq_c.sum_amount
FROM fr_uniq
JOIN acq_c on acq_c.month = fr_uniq.month;

/*23. Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.*/

WITH

avg2011 AS (SELECT country_code,
                   AVG(funding_total) AS avg_total_2011
            FROM company
            WHERE EXTRACT(YEAR FROM CAST(founded_at AS timestamp)) = 2011
            GROUP BY country_code),
            
avg2012 AS (SELECT country_code,
                   AVG(funding_total) AS avg_total_2012
            FROM company
            WHERE EXTRACT(YEAR FROM CAST(founded_at AS timestamp)) = 2012
            GROUP BY country_code),

avg2013 AS (SELECT country_code,
                   AVG(funding_total) AS avg_total_2013
            FROM company
            WHERE EXTRACT(YEAR FROM CAST(founded_at AS timestamp)) = 2013
            GROUP BY country_code)
                
SELECT avg2011.country_code AS country_code,
       avg2011.avg_total_2011,
       avg2012.avg_total_2012,
       avg2013.avg_total_2013
FROM avg2011
INNER JOIN avg2012 ON avg2011.country_code=avg2012.country_code
INNER JOIN avg2013 ON avg2012.country_code=avg2013.country_code
ORDER BY avg2011.avg_total_2011 DESC;


